struct GlitchShader
{
    float rand(float2 co)
    {
        return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453);
    }

    float3 GetColor(float2 uv)
    {
        float4 SceneTexture = SceneTextureLookup(uv, 14, false);

        return SceneTexture.rgb;
    }

    float sineWithGaps(float x, float frequency, float gapTime)
    {
        // Standard sine wave
        float sineValue = sin(x * frequency);
        
        // Use modulus to create gaps (flatten the sine value to 0 in certain intervals)
        if (fmod(x, gapTime) < gapTime * 0.5)
        {
            return sineValue; // Keep the sine wave
        }
        else
        {
            return 0.0; // Create the gap by returning 0
        }
    }

    float3 GlitchEffect(float shakePower, float shakeRate, float shakeSpeed, float shakeBlockSize, float shakeColorRate, float2 uv, float deltaTime, float time, float2 resolution, float glitchRate, float glitchGapTime)
    {
        float enable_shift = float(rand(trunc(deltaTime * shakeSpeed)) < shakeRate);

        // Apply a random horizontal shift to the UV coordinates based on the Y position of the pixel and deltaTime.
        // `shakeBlockSize` controls the block size for shifting, while `shakePower` determines the strength of the shift.
        // This shift is only applied if `enable_shift` is true (non-zero).
        float2 fixed_uv = uv;
        fixed_uv.x += (rand((trunc(uv.y * shakeBlockSize) / shakeBlockSize) + deltaTime) - 0.5) * shakePower * enable_shift;

        // Calculate a random glitch effect for specific horizontal lines based on the Y position and deltaTime.
        // `glitchLine` determines whether to apply the glitch effect on this line.
        float glitchLine = rand(float2(uv.y * resolution.y, deltaTime)) * 2.0; // Condition to apply the glitch only on certain lines
        if (glitchLine > 1.5)
        {
            // If `glitchLine` condition is met, apply a sine-based horizontal distortion to the UV coordinates.
            // The distortion's frequency and strength are influenced by deltaTime and the Y position of the UV. 
            fixed_uv.x += sin(deltaTime * 60 + fixed_uv.y * 60) * 0.1 * glitchLine;
        }

        // Apply color separation effect based on the `enable_shift` condition.
        // Adjusts red and blue channels independently by shifting them horizontally by `shakeColorRate`
        float3 pixel_color = GetColor(fixed_uv);
        pixel_color.r = lerp(pixel_color, GetColor(fixed_uv + float2(shakeColorRate, 0.0)).r, enable_shift);
        pixel_color.b = lerp(pixel_color.b, GetColor(fixed_uv + float2(-shakeColorRate, 0.0)).b, enable_shift);

        //Use a modified sine wave to check whether the effect will be applied or not
        //This creates the intermitent effect of the glitch
        float glitchValue = sineWithGaps(time, glitchRate, glitchGapTime);
        
        if (glitchValue > 0)
            return pixel_color;
        else
            return GetColor(uv);
    }
};